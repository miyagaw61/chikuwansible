[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    source {{nvim_config_files}}/plugins/deoplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'tomasr/molokai'

[[plugins]]
repo = 'nixprime/cpsm'
hook_add = 'set runtimepath+={{nvim_config_files}}/repos/github.com/nixprime/cpsm'

[[plugins]]
repo = 'Shougo/neomru.vim'

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'zchee/deoplete-jedi'
#on_i = 1
on_ft = 'python'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
#on_ft = 'snippet'
hook_source = '''
  imap <silent><C-k> <Plug>(neosnippet_jump_or_expand)
  smap <silent><C-k> <Plug>(neosnippet_jump_or_expand)
  xmap <silent><C-k> <Plug>(neosnippet_expand_target)
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
  let g:neosnippet#snippets_directory = '~/.cache/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets/'
  "let g:snippets_dir = '$REPOS/mgtools/conf/rc/vim/plugins/snippets/'
'''

[[plugins]]
repo = 'Shougo/denite.nvim'
#on_cmd = 'Denite'
hook_add = '''
  nnoremap <silent> [Window]r
        \ :<C-u>Denite -buffer-name=register
        \ register neoyank<CR>
  xnoremap <silent> [Window]r
        \ :<C-u>Denite -default-action=replace -buffer-name=register
        \ register neoyank<CR>
  nnoremap <silent> [Window]<Space>
        \ :<C-u>Denite file_rec:~/.vim/rc<CR>
  nnoremap <silent> / :<C-u>Denite -buffer-name=search -auto-highlight
        \ line<CR>
  nnoremap <silent> * :<C-u>DeniteCursorWord -buffer-name=search
        \ -auto-highlight -mode=normal line<CR>
  nnoremap <silent> [Window]s :<C-u>Denite file_point file_old
        \ -sorters=sorter_rank
        \ `finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'`<CR>
  nnoremap <silent> [Window]f :<C-u>Denite file_rec -path=
  nnoremap <silent><expr> tt  &filetype == 'help' ?  "g\<C-]>" :
        \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately
        \  tag:include\<CR>"
  nnoremap <silent><expr> tp  &filetype == 'help' ?
        \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite -mode=normal jump\<CR>"
  "nnoremap <silent> [Window]n :<C-u>Denite dein<CR>
  "nnoremap <silent> [Window]g :<C-u>Denite ghq<CR>
  nnoremap <silent> [Window]g :<C-u>Denite -buffer-name=search
        \ -no-empty -mode=normal grep<CR>
  nnoremap <silent> [Space]n :<C-u>Denite -buffer-name=search
        \ -resume -mode=normal -refresh<CR>
  nnoremap <silent> ft :<C-u>Denite filetype<CR>
  nnoremap <silent> <C-t> :<C-u>Denite
        \ -select=`tabpagenr()-1` -mode=normal deol<CR>
  nnoremap <silent> <C-k> :<C-u>Denite -mode=normal change jump<CR>
  "nnoremap <silent> [Space]gs :<C-u>Denite gitstatus<CR>
  nnoremap <silent> [Space]h
        \ :<C-u>Denite command_history<CR>
  nnoremap <silent> [Window]b :Denite buffer<CR>
'''
hook_source = 'source {{nvim_config_files}}/plugins/denite.rc.vim'

[[plugins]]
repo = 'zchee/deoplete-clang'
hook_source = '''
let g:deoplete#sources#clang#libclang_path = '{{libclang_path}}'
let g:deoplete#sources#clang#clang_header = '{{clang_header}}'
'''
on_ft = ['c', 'cpp', 'cmake']
depends = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/vinarise'
on_cmd = 'Vinarise'
hook_add = '''
let g:vinarise_enable_auto_detect = 1
let g:vinarise_guifont = 'Courier\ 10\ Pitch:h14'
'''

#[[plugins]]
#repo = 'easymotion/vim-easymotion'
#hook_add = '''
#    let g:EasyMotion_do_mapping = 0
#    nmap s <Plug>(easymotion-s2)
#    xmap s <Plug>(easymotion-s2)
#    omap z <Plug>(easymotion-s2)
#    nmap S <Plug>(easymotion-sn)
#    xmap S <Plug>(easymotion-sn)
#    omap S <Plug>(easymotion-tn)
#    let g:EasyMotion_smartcase = 1
#    map <Leader>j <Plug>(easymotion-j)
#    map <Leader>k <Plug>(easymotion-k)
#    let g:EasyMotion_startofline = 0
#    " let g:EasyMotion_keys = 'QZASDFGHJKL;'
#    let g:EasyMotion_keys = 'Q1Z2A3S4D5F6G7H8J9K/;'
#    let g:EasyMotion_use_upper = 1
#    let g:EasyMotion_enter_jump_first = 1
#'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']


#[[plugins]]
#repo = 'kana/vim-smartword'
#hook_add = '''
#    nnoremap w <Plug>(smartword-w)
#    nnoremap b <Plug>(smartword-b)
#    nnoremap e <Plug>(smartword-e)
#'''

#[[plugins]]
#repo = 'rking/ag.vim'

[[plugins]]
repo = 'erickbelfy/rg.vim'

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
on_source = 'denite.nvim'
#hook_add = '''
#  "nnoremap <silent> N :<C-u>call deol#new({'command': 'bash'})<CR>
#  "nnoremap <silent> N :terminal<CR>i
#  "nnoremap <silent> [Window]D  :<C-u>call deol#kill_editor()<CR>
#'''
hook_source = '''
  let g:deol#prompt_pattern = '\w*%'
  set shell=bash
  " Set to $PATH.
  "let s:bin = dein#get('vim-themis').rtp . '/bin'
  function! s:split_envpath(path) abort "ANSIBLE_BRACEANSIBLE_BLACE{
    let delimiter = has('win32') ? ';' : ':'
    if stridx(a:path, '\' . delimiter) < 0
      return split(a:path, delimiter)
    endif
    let split = split(a:path, '\\\@<!\%(\\\\\)*\zs' . delimiter)
    return map(split,'substitute(v:val, ''\\\([\\'
          \ . delimiter . ']\)'', "\\1", "g")')
  endfunction"}}}
  function! s:join_envpath(list, orig_path, add_path) abort "ANSIBLE_BRACEANSIBLE_BRACE{
    let delimiter = has('win32') ? ';' : ':'
    return (stridx(a:orig_path, '\' . delimiter) < 0
          \ && stridx(a:add_path, delimiter) < 0) ?
          \   join(a:list, delimiter) :
          \   join(map(copy(a:list),
          \        "substitute(v:path, ',\\|\\\\,\\@=', '\\\\\\0', 'g')"),
          \        delimiter)
  endfunction"}}}
  "let $PATH = s:join_envpath(
  "      \ dein#util#_uniq(insert(
  "      \    s:split_envpath($PATH), s:bin)), $PATH, s:bin)
  "let $THEMIS_HOME = dein#get('vim-themis').rtp
  "unlet s:bin
  "autocmd FileType deol call s:on_deol()
  "function! s:on_deol() abort
  "  nnoremap <buffer><silent> [Space]gc :<C-u>call deol#send('git commit')<CR>
  "  nnoremap <buffer><silent> [Space]gA :<C-u>call deol#send('git commit --amend')<CR>
  "  nnoremap <buffer><silent> [Space]r :<C-u>call deol#send('cargo run')<CR>
  "endfunction
'''

[[plugins]]
repo = 'Shougo/unite.vim'
depends = 'neomru.vim'
hook_source = 'source {{nvim_config_files}}/plugins/unite.rc.vim'

[[plugins]]
repo = 'mhinz/neovim-remote'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'lighttiger2505/gtags.vim'
hook_add = '''
    " Options
    let g:Gtags_Auto_Map = 0
    let g:Gtags_OpenQuickfixWindow = 1
    " Keymap
    " Show definetion of function cousor word on quickfix
    nmap [denite-gtags]k :<C-u>exe("Gtags ".expand('<cword>'))<CR>
    " Show reference of cousor word on quickfix
    nmap [denite-gtags]r :<C-u>exe("Gtags -r ".expand('<cword>'))<CR>
    nnoremap <C-j> :GtagsCursor<CR>
    nnoremap <C-r> :<C-u>exe('Gtags -r '.expand('<cword>'))<CR>
    nnoremap <C-i> :Gtags -f %<CR>
    nnoremap <C-g> :Gtags
    nnoremap <C-n> :cn<CR>
    nnoremap <C-p> :cp<CR>
    nnoremap <C-h> <C-w><C-w>ZQ
'''

#[[plugins]]
#repo = 'jsfaint/gen_tags.vim'
#hook_add = '''
#    let g:gen_tags#gtags_auto_gen = 1
#'''

[[plugins]]
repo = 'ozelentok/denite-gtags'
hook_add = '''
    noremap [denite-gtags]  <Nop>
    nmap ,t [denite-gtags]
    nnoremap [denite-gtags]d :<C-u>DeniteCursorWord -buffer-name=gtags_def -mode=normal gtags_def<CR>
    nnoremap [denite-gtags]f :<C-u>DeniteCursorWord -buffer-name=gtags_ref -mode=normal gtags_ref<CR>
    nnoremap [denite-gtags]c :<C-u>DeniteCursorWord -buffer-name=gtags_context -mode=normal gtags_context<CR>
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
    let g:rustfmt_autosave = 1
'''

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
on_ft = 'rust'
depends = ['deoplete.nvim']
hook_source = '''
    let g:deoplete#sources#rust#racer_binary='{{home}}.cargo/bin/racer'
    let g:deoplete#sources#rust#rust_source_path='{{home}}/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src'
    let g:deoplete#sources#rust#show_duplicates=1
    let g:deoplete#sources#rust#disable_keymap=1
    nmap <buffer> gd <plug>DeopleteRustGoToDefinitionDefault
    nmap <buffer> K  <plug>DeopleteRustShowDocumentation
'''

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = 'rust'
hook_source = '''
    " racerバイナリ指定
    let g:racer_cmd = "~/.cargo/bin/racer"
    " rust本体のソースコードパス指定
    "let $RUST_SRC_PATH="/mnt/c/Users/miyagaw61/home/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"
'''

#[[plugins]]
#repo = 'rhysd/rust-doc.vim'
#on_ft = 'rust'
#hook_source = '''
#    " rustドキュメントのパス指定
#    "let g:rust_doc#downloaded_rust_doc_dir = "~/docs/rust-docs"
#'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_source = '''
    map <Space>r [Space]r
    " hook-shabadoubi_touch_henshin を有効にする
    " shabadoubi_touch_henshin/wait でアニメーションの重みを設定できる
    " 早いと思ったらこの値を大きくすれば遅くなる
    let g:quickrun_config = {
    \   "_" : {
    \       "outputter/buffer/split" : ":botright 13",
    \       "runner" : "vimproc",
    \       "runner/vimproc/updatetime" : 40,
    \   }
    \}
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_source = '''
    " Called once right before you start selecting multiple cursors
    function! Multiple_cursors_before()
      if exists(':NeoCompleteLock')==2
        exe 'NeoCompleteLock'
      endif
    endfunction

    " Called once only when the multiple selection is canceled (default <Esc>)
    function! Multiple_cursors_after()
      if exists(':NeoCompleteUnlock')==2
        exe 'NeoCompleteUnlock'
      endif
    endfunction
'''

#[[plugins]]
#repo = 'nathanaelkane/vim-indent-guides'
#hook_source = '''
#    let g:indent_guides_enable_on_vim_startup = 1
#'''

[[plugins]]
repo = 'rking/ag.vim'
#hook_source = '''
#    let g:ag_prg="/usr/bin/ag --vimgrep"
#'''

[[plugins]]
repo = 'jremmen/vim-ripgrep'
#hook_source = '''
#let g:rg_binary='/home/miyagaw61/.cargo/bin/rg'
#'''
