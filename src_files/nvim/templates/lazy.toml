#[[plugins]]
#repo = 'Shougo/unite.vim'
#depends = 'neomru.vim'
#hook_source = 'source {{nvim_config_files}}/plugins/unite.rc.vim'

#[[plugins]]
#repo = 'kana/vim-smartword'
#hook_add = '''
#    nnoremap w <Plug>(smartword-w)
#    nnoremap b <Plug>(smartword-b)
#    nnoremap e <Plug>(smartword-e)
#'''

#[[plugins]]
#repo = 'jsfaint/gen_tags.vim'
#on_i = 1
#hook_add = '''
#    let g:gen_tags#gtags_auto_gen = 1
#'''

#[[plugins]]
#repo = 'tpope/vim-fugitive'

#[[plugins]]
#repo = 'rking/ag.vim'
#hook_add = '''
#    let g:ag_prg="/usr/bin/ag --vimgrep"
#'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_i = 1
hook_source = '''
    let g:deoplete#enable_at_startup = 1
    source {{nvim_config_files}}/plugins/deoplete.rc.vim
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'zchee/deoplete-jedi'
on_ft = 'python'
depends = ['deoplete.nvim']

[[plugins]]
repo = 'zchee/deoplete-clang'
on_ft = ['c', 'cpp', 'cmake']
depends = ['deoplete.nvim']
hook_source = '''
    let g:deoplete#sources#clang#libclang_path = '{{libclang_path}}'
    let g:deoplete#sources#clang#clang_header = '{{clang_header}}'
'''

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
hook_source = '''
    let g:rustfmt_autosave = 1
    let g:rust_doc#define_map_K = 0
'''

#[[plugins]]
#repo = 'racer-rust/vim-racer'
#on_ft = 'rust'
#hook_source = '''
#    " racerバイナリ指定
#    let g:racer_cmd = "{{home}}/.cargo/bin/racer"
#    " rust本体のソースコードパス指定
#    "let $RUST_SRC_PATH="/mnt/c/Users/miyagi1024/home/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"
#    let $RUST_SRC_PATH="{{home}}/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"
#'''

#[[plugins]]
#repo = 'rhysd/rust-doc.vim'
#on_ft = 'rust'
#hook_source = '''
#    " rustドキュメントのパス指定
#    let g:rust_doc#downloaded_rust_doc_dir = "{{home}}/docs/rust-docs"
#'''

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
on_ft = 'rust'
depends = ['deoplete.nvim']
hook_source = '''
    let g:deoplete#sources#rust#racer_binary='{{home}}/.cargo/bin/racer'
    let g:deoplete#sources#rust#rust_source_path='{{home}}/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src'
    let $RUST_SRC_PATH="{{home}}/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src"
    let g:deoplete#sources#rust#show_duplicates=1
    let g:deoplete#sources#rust#disable_keymap=1
    nmap <buffer> gd <Space>w<plug>DeopleteRustGoToDefinitionDefault
    nmap <buffer> K  <plug>DeopleteRustShowDocumentation
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
on_i = 1
hook_source = '''
  imap <silent><C-k> <Plug>(neosnippet_jump_or_expand)
  smap <silent><C-k> <Plug>(neosnippet_jump_or_expand)
  xmap <silent><C-k> <Plug>(neosnippet_expand_target)
  let g:neosnippet#enable_snipmate_compatibility = 1
  let g:neosnippet#enable_completed_snippet = 1
  let g:neosnippet#expand_word_boundary = 1
  let g:neosnippet#snippets_directory = '{{home}}/.cache/dein/repos/github.com/Shougo/neosnippet-snippets/neosnippets/'
'''

[[plugins]]
repo = 'Shougo/vinarise'
on_cmd = 'Vinarise'
hook_add = '''
let g:vinarise_enable_auto_detect = 1
let g:vinarise_guifont = 'Courier\ 10\ Pitch:h14'
'''

[[plugins]]
repo = 'Shougo/neoyank.vim'
on_if = 1
on_event = 'TextYankPost'
on_source = ['unite.vim', 'denite.nvim']

[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
hook_source = '''
  let g:deol#prompt_pattern = '\w*%'
  set shell=bash
  " Set to $PATH.
  "let s:bin = dein#get('vim-themis').rtp . '/bin'
  function! s:split_envpath(path) abort
    let delimiter = has('win32') ? ';' : ':'
    if stridx(a:path, '\' . delimiter) < 0
      return split(a:path, delimiter)
    endif
    let split = split(a:path, '\\\@<!\%(\\\\\)*\zs' . delimiter)
    return map(split,'substitute(v:val, ''\\\([\\'
          \ . delimiter . ']\)'', "\\1", "g")')
  endfunction"}}}
  function! s:join_envpath(list, orig_path, add_path) abort
    let delimiter = has('win32') ? ';' : ':'
    return (stridx(a:orig_path, '\' . delimiter) < 0
          \ && stridx(a:add_path, delimiter) < 0) ?
          \   join(a:list, delimiter) :
          \   join(map(copy(a:list),
          \        "substitute(v:path, ',\\|\\\\,\\@=', '\\\\\\0', 'g')"),
          \        delimiter)
  endfunction"}}}
  "let $PATH = s:join_envpath(
  "      \ dein#util#_uniq(insert(
  "      \    s:split_envpath($PATH), s:bin)), $PATH, s:bin)
  "let $THEMIS_HOME = dein#get('vim-themis').rtp
  "unlet s:bin
  "autocmd FileType deol call s:on_deol()
  "function! s:on_deol() abort
  "  nnoremap <buffer><silent> [Space]gc :<C-u>call deol#send('git commit')<CR>
  "  nnoremap <buffer><silent> [Space]gA :<C-u>call deol#send('git commit --amend')<CR>
  "  nnoremap <buffer><silent> [Space]r :<C-u>call deol#send('cargo run')<CR>
  "endfunction
'''

[[plugins]]
repo = 'lighttiger2505/gtags.vim'
on_cmd = 'Gtags'
hook_add = '''
    " Options
    let g:Gtags_Auto_Map = 0
    let g:Gtags_OpenQuickfixWindow = 1
    "nnoremap <C-j> :GtagsCursor<CR>
    "nnoremap <C-r> :<C-u>exe('Gtags -r '.expand('<cword>'))<CR>
    "nnoremap <C-i> :Gtags -f %<CR>
    "nnoremap <C-g> :Gtags<Space>
'''

[[plugins]]
repo = 'ozelentok/denite-gtags'
on_source = ['gtags.vim', 'denite.nvim']
hook_add = '''
    noremap [denite-gtags]  <Nop>
    nmap ,t [denite-gtags]
    nnoremap [denite-gtags]a :<C-u>DeniteCursorWord -buffer-name=search gtags_context<CR>
    nnoremap [denite-gtags]d :<C-u>mark '<CR>:DeniteCursorWord -buffer-name=search gtags_def<CR> " if you use cscope, do comment out
    nnoremap [denite-gtags]c :<C-u>DeniteCursorWord -buffer-name=search gtags_context<CR>
    nnoremap [denite-gtags]r :<C-u>DeniteCursorWord -buffer-name=search gtags_ref<CR>
    nnoremap [denite-gtags]g :<C-u>DeniteCursorWord -buffer-name=search gtags_grep<CR>
    nnoremap [denite-gtags]f :<C-u>Denite -buffer-name=search gtags_file<CR>
    nnoremap [denite-gtags]F :<C-u>Denite -buffer-name=search gtags_files<CR>
    nnoremap [denite-gtags]p :<C-u>Denite -buffer-name=search gtags_path<CR>
    nnoremap [denite-gtags]c :<C-u>Denite -buffer-name=search gtags_completion<CR>
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
hook_source = '''
    map <Space>r [Space]r
    " hook-shabadoubi_touch_henshin を有効にする
    " shabadoubi_touch_henshin/wait でアニメーションの重みを設定できる
    " 早いと思ったらこの値を大きくすれば遅くなる
    let g:quickrun_config = {
    \   "_" : {
    \       "outputter/buffer/split" : ":botright 13",
    \       "runner" : "vimproc",
    \       "runner/vimproc/updatetime" : 40,
    \   }
    \}
'''

[[plugins]]
repo = 'Shougo/defx.nvim'
on_cmd = 'Defx'
hook_source = '''
    autocmd FileType defx call s:defx_my_settings()
        function! s:defx_my_settings() abort
         " Define mappings
         " nnoremap <silent><buffer><expr> <CR>
         "\ defx#do_action('open')
          nnoremap <silent><buffer><expr> <CR>
         \ defx#do_action('drop')
          nnoremap <silent><buffer><expr> c
         \ defx#do_action('copy')
          nnoremap <silent><buffer><expr> m
         \ defx#do_action('move')
          nnoremap <silent><buffer><expr> p
         \ defx#do_action('paste')
          nnoremap <silent><buffer><expr> l
         \ defx#do_action('drop')
          nnoremap <silent><buffer><expr> E
         \ defx#do_action('open', 'vsplit')
          nnoremap <silent><buffer><expr> P
         \ defx#do_action('open', 'pedit')
          nnoremap <silent><buffer><expr> K
         \ defx#do_action('new_directory')
          nnoremap <silent><buffer><expr> N
         \ defx#do_action('new_file')
          nnoremap <silent><buffer><expr> d
         \ defx#do_action('remove')
          nnoremap <silent><buffer><expr> r
         \ defx#do_action('rename')
         " nnoremap <silent><buffer><expr> x
         "\ defx#do_action('execute_system')
          nnoremap <silent><buffer><expr> yy
         \ defx#do_action('yank_path')
          nnoremap <silent><buffer><expr> .
         \ defx#do_action('toggle_ignored_files')
          nnoremap <silent><buffer><expr> h
         \ defx#do_action('cd', ['..'])
          nnoremap <silent><buffer><expr> ~
         \ defx#do_action('cd')
          nnoremap <silent><buffer><expr> <S-j>.
         \ defx#do_action('cd')
          nnoremap <silent><buffer><expr> <S-j>/
         \ defx#do_action('cd') . defx#do_action('cd', '../..')
          nnoremap <silent><buffer><expr> <S-j>s
         \ defx#do_action('cd') . defx#do_action('cd', 'src')
          nnoremap <silent><buffer><expr> <S-j>g
         \ defx#do_action('cd') . defx#do_action('cd', 'src/github.com')
          nnoremap <silent><buffer><expr> <S-j>m
         \ defx#do_action('cd') . defx#do_action('cd', 'src/github.com/miyagi1024')
          nnoremap <silent><buffer><expr> <S-j>d
         \ defx#do_action('cd') . defx#do_action('cd', 'docs')
          nnoremap <silent><buffer><expr> <S-j>v
         \ defx#do_action('cd') . defx#do_action('cd', 'docs/config_files/nvim')
          nnoremap <silent><buffer><expr> <S-j>b
         \ defx#do_action('cd') . defx#do_action('cd', 'docs/config_files/bash')
          nnoremap <silent><buffer><expr> q
         \ defx#do_action('quit')
          nnoremap <silent><buffer><expr> <Tab>
         \ defx#do_action('toggle_select') . 'j'
          nnoremap <silent><buffer><expr> *
         \ defx#do_action('toggle_select_all')
          nnoremap <silent><buffer><expr> j
         \ line('.') == line('$') ? 'gg' : 'j'
          nnoremap <silent><buffer><expr> k
         \ line('.') == 1 ? 'G' : 'k'
          nnoremap <silent><buffer><expr> <C-l>
         \ defx#do_action('redraw')
          nnoremap <silent><buffer><expr> <C-g>
         \ defx#do_action('print')
          nnoremap <silent><buffer><expr> chd
         \ defx#do_action('change_vim_cwd')
          nnoremap <silent><buffer> cd
         \ :CdNowDefx<CR>:CdDefx<Space>
          nnoremap <silent><buffer> <C-g>s
         \ :GitStatusDefx<CR>
          nnoremap <silent><buffer> <C-g>a
         \ :GitAddDefx<CR><CR>
          nnoremap <silent><buffer> <C-g>c
         \ :GitCommitDefx<Space>
          nnoremap <silent><buffer> <C-g>d
         \ :GitDiffDefx<CR><CR>
          nnoremap <silent><buffer> <C-g>l
         \ :GitLogDefx<CR>
          nnoremap <silent><buffer> <C-g>p
         \ :GitPushDefx<CR>
          nnoremap <silent><buffer> x
         \ :SystemDefx<Space>
        endfunction
'''

[[plugins]]
repo = 'neoclide/denite-extra'
on_source = 'denite.nvim'

[[plugins]]
repo = 'mhinz/neovim-remote'
on_source = 'deol.nvim'

[[plugins]]
repo = 'Shougo/denite.nvim'
on_path = '.*'
hook_add = '''
    autocmd FileType denite call s:denite_my_settings()
    autocmd FileType denite set nopaste
    function! s:denite_my_settings() abort
      nnoremap <silent><buffer><expr> <CR>
      \ denite#do_map('do_action')
      nnoremap <silent><buffer><expr> d
      \ denite#do_map('do_action', 'delete')
      nnoremap <silent><buffer><expr> p
      \ denite#do_map('do_action', 'preview')
      nnoremap <silent><buffer><expr> q
      \ denite#do_map('quit')
      nnoremap <silent><buffer><expr> i
      \ denite#do_map('open_filter_buffer')
      nnoremap <silent><buffer><expr> <Space>
      \ denite#do_map('toggle_select').'j'
      "nnoremap <silent><buffer><expr> j
      "\ 'j' . denite#do_map('do_action', 'preview')
      "nnoremap <silent><buffer><expr> k
      "\ 'k' . denite#do_map('do_action', 'preview')
    endfunction
    nnoremap <silent> [Window]r
          \ :<C-u>Denite -buffer-name=register -highlight-window-background=MyFloat
          \ register neoyank<CR>
    xnoremap <silent> [Window]r
          \ :<C-u>Denite -default-action=replace -buffer-name=register -highlight-window-background=MyFloat
          \ register neoyank<CR>
    nnoremap <silent> [Window]<Space>
          \ :<C-u>Denite file/rec:~/.vim/rc -highlight-window-background=MyFloat<CR>
    "nnoremap <silent> / :<C-u>Denite -buffer-name=search -winheight=10 -highlight-window-background=MyFloat line<CR>
    nnoremap <silent> * :<C-u>DeniteCursorWord -buffer-name=search
          \ -highlight-window-background=MyFloat -mode=normal line<CR>
    nnoremap <silent> [Window]s :<C-u>Denite file/point file/old
          \ -sorters=sorter_rank -highlight-window-background=MyFloat
          \ `finddir('.git', ';') != '' ? 'file/rec/git' : 'file/rec'`<CR>
    "nnoremap <silent> [Window]d :<C-u>Denite file/rec -path=
    nnoremap <silent> [Window]d :OpenFileByDenite<Space>
    nnoremap <silent><expr> tt  &filetype == 'help' ?  "g\<C-]>" :
          \ ":\<C-u>DeniteCursorWord -buffer-name=tag -immediately -highlight-window-background=MyFloat
          \  tag:include\<CR>"
    nnoremap <silent><expr> tp  &filetype == 'help' ?
          \ ":\<C-u>pop\<CR>" : ":\<C-u>Denite -mode=normal -highlight-window-background=MyFloat jump\<CR>"
    "nnoremap <silent> [Window]n :<C-u>Denite -highlight-window-background=MyFloat dein<CR>
    "nnoremap <silent> [Window]g :<C-u>Denite ghq -highlight-window-background=MyFloat<CR>
    "nnoremap <silent> [Window]g :<C-u>Denite -buffer-name=search
    "      \ -no-empty -mode=normal -highlight-window-background=MyFloat grep<CR>
    "nnoremap <silent> [Space]n :<C-u>Denite -buffer-name=search
    "      \ -resume -mode=normal -refresh -mode=normal -highlight-window-background=MyFloat<CR>
    "nnoremap <silent> [Space]n :<C-u>Denite -buffer-name=search -resume -mode=normal -highlight-window-background=MyFloat<CR>
    nnoremap <silent> [Space]n :<C-u>Denite -resume -mode=normal -highlight-window-background=MyFloat<CR>
    nnoremap <silent> ft :<C-u>Denite filetype -highlight-window-background=MyFloat<CR>
    nnoremap <silent> <C-t> :<C-u>Denite
          \ -select=`tabpagenr()-1` -mode=normal deol -highlight-window-background=MyFloat<CR>
    nnoremap <silent> <C-k> :<C-u>Denite -mode=normal change jump -highlight-window-background=MyFloat<CR>
    "nnoremap <silent> [Space]gs :<C-u>Denite gitstatus -highlight-window-background=MyFloat<CR>
    nnoremap <silent> [Space]h
          \ :<C-u>Denite command_history -highlight-window-background=MyFloat<CR>
    nnoremap <silent> [Window]b :Denite buffer -highlight-window-background=MyFloat<CR>
    nnoremap <silent> / :Denite line -highlight-window-background=MyFloat<CR>
'''
hook_source = 'source {{nvim_config_files}}/plugins/denite.rc.vim'

[[plugins]]
repo = 'raghur/fruzzy'
on_source = ['denite.nvim']
hook_source = 'let g:fruzzy#sortonempty = 0'
hook_post_update = 'call fruzzy#install()'
