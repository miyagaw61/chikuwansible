#!/usr/bin/env python3

from enert import *
import os
import sys

envs = os.environ

repo_dir = os.getcwd()

result_file = "/tmp/follow_upstream.tmp"
result_state = File(result_file).read()
File(result_file).rm()

args = sys.argv[1:]

def usage():
    print("Usage: follow_upstream <UPSTREAM_BRANCH_NAME>")
    exit()

if "-h" in args or "--help" in args:
    usage()

ups_branch = get(args, 0)
if ups_branch == None:
    usage()

cmd = "git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's@\* \(.*\)@\1@'"
now_branch, e = Shell(cmd).read()
now_branch = now_branch.strip()
if e:
	print("err: now branch is not found")
	exit()

repo_path, e = Shell("git rev-parse --show-toplevel").read()
repo_path = repo_path.strip()
if e:
    print("err: repository path is not found")
    exit()
repo_name = os.path.basename(repo_path)

def exec_in_repo(cmd):
    cmd_goto_repo = "cd " + repo_dir + "; "
    o, e = Shell(cmd_goto_repo + cmd).read()
    if "error" in e:
        print(red("[!]err", "bold"))
        print(e)
        exit()

print(green("[+]back up", "bold"))
cmd = f"cd .. && rm -rf backuped_{repo_name} && cp -a {repo_name} backuped_{repo_name}"
exec_in_repo(cmd)

print(green(f"[+]checkout to {ups_branch}", "bold"))
cmd = f"git checkout {ups_branch}"
exec_in_repo(cmd)

print(green("[+]pull --rebase", "bold"))
cmd = "git pull --rebase"
exec_in_repo(cmd)

print(green(f"[+]checkout to {now_branch}", "bold"))
cmd = f"git checkout {now_branch}"
exec_in_repo(cmd)

print(green("[+]pull --rebase", "bold"))
cmd = "git pull --rebase"
exec_in_repo(cmd)

print(green(f"[+]rebase {ups_branch}", "bold"))
cmd = f"git rebase {ups_branch}"
exec_in_repo(cmd)

if not result_state == "publish":
    ans = input(red("[?]push --force ? : ", "bold"))
    if ans == "y":
        print(green("[+]push --force", "bold"))
        cmd = "git push --force"
        exec_in_repo(cmd)
        File(result_file).write("True")
    else:
        File(result_file).write("False")
else:
    File(result_file).write("True")
